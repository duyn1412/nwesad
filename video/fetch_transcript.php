<?php
/**
 * Fetch the closed‑caption transcript for a given YouTube video using OAuth2.
 *
 * This endpoint expects a JSON payload containing a single key,
 * `youtube_url`, whose value is the URL of the YouTube video.  It
 * extracts the video ID from the URL and uses OAuth2 access token
 * to fetch the actual transcript from YouTube API.
 */

header('Content-Type: application/json');

// Start session to access OAuth tokens
session_start();

// Include OAuth configuration
if (file_exists(__DIR__ . '/oauth-config.php')) {
    require_once __DIR__ . '/oauth-config.php';
} else {
    echo json_encode(['error' => 'OAuth configuration not found']);
    exit;
}

// Check if user has valid OAuth tokens
if (!hasValidYouTubeTokens()) {
    echo json_encode([
        'error' => 'OAuth2 authentication required',
        'redirect_url' => getYouTubeAuthUrl(),
        'message' => 'Please authenticate with Google to access YouTube transcripts'
    ]);
    exit;
}

// Read the raw POST body and decode JSON
$body = file_get_contents('php://input');
$payload = json_decode($body, true);

if (!is_array($payload) || empty($payload['youtube_url'])) {
    echo json_encode(['error' => 'No youtube_url provided']);
    exit;
}

/**
 * Extracts a YouTube video ID from a URL.
 * Enhanced to handle more YouTube URL formats.
 */
function getYouTubeVideoId(string $url): string
{
    // Clean the URL first
    $url = trim($url);
    
    // DON'T remove query parameters - we need them for YouTube URLs!
    // $url = preg_replace('/[?&].*$/', '', $url); // REMOVED THIS LINE
    
    $patterns = [
        // Short form: youtu.be/VIDEO_ID
        '/youtu\.be\/([a-zA-Z0-9_-]{11})/',
        
        // Standard watch form: youtube.com/watch?v=VIDEO_ID
        '/youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Alternative watch form: youtube.com/watch?feature=...&v=VIDEO_ID
        '/youtube\.com\/watch\?.*[&?]v=([a-zA-Z0-9_-]{11})/',
        
        // Embed form: youtube.com/embed/VIDEO_ID
        '/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/',
        
        // Channel video form: youtube.com/channel/.../videos/VIDEO_ID
        '/youtube\.com\/channel\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // User video form: youtube.com/user/.../videos/VIDEO_ID
        '/youtube\.com\/user\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // Direct video form: youtube.com/v/VIDEO_ID
        '/youtube\.com\/v\/([a-zA-Z0-9_-]{11})/',
        
        // Mobile form: m.youtube.com/watch?v=VIDEO_ID
        '/m\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Music form: music.youtube.com/watch?v=VIDEO_ID
        '/music\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Just the video ID itself (if user pastes only the ID)
        '/^([a-zA-Z0-9_-]{11})$/'
    ];
    
    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $url, $matches)) {
            return $matches[1];
        }
    }
    
    return '';
}

$videoUrl = trim($payload['youtube_url']);
$videoId  = getYouTubeVideoId($videoUrl);

// Debug logging
error_log("YouTube URL received: " . $videoUrl);
error_log("Extracted video ID: " . $videoId);

if ($videoId === '') {
    echo json_encode([
        'error' => 'Invalid YouTube URL',
        'debug' => [
            'received_url' => $videoUrl,
            'extracted_id' => $videoId,
            'message' => 'Could not extract video ID from the provided URL'
        ]
    ]);
    exit;
}

// Function makeYouTubeApiRequest is defined in oauth-config.php

// First, get video details and available captions
$videoInfoUrl = "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=" . urlencode($videoId);
$videoInfo = makeYouTubeApiRequest($videoInfoUrl);

if (isset($videoInfo['error'])) {
    echo json_encode(['error' => 'Failed to get video info: ' . $videoInfo['error']]);
    exit;
}

if (empty($videoInfo['items'])) {
    echo json_encode(['error' => 'Video not found or access denied']);
    exit;
}

$videoSnippet = $videoInfo['items'][0]['snippet'];
$videoTitle = $videoSnippet['title'];

// Get available captions
$captionsUrl = "https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=" . urlencode($videoId);
$captionsInfo = makeYouTubeApiRequest($captionsUrl);

if (isset($captionsInfo['error'])) {
    echo json_encode(['error' => 'Failed to get captions info: ' . $captionsInfo['error']]);
    exit;
}

$availableCaptions = [];
if (isset($captionsInfo['items'])) {
    foreach ($captionsInfo['items'] as $caption) {
        $snippet = $caption['snippet'];
        $availableCaptions[] = [
            'id' => $caption['id'],
            'language' => $snippet['language'] ?? 'unknown',
            'name' => $snippet['name'] ?? '',
            'isCC' => ($snippet['trackKind'] ?? '') === '',
            'isAutoGenerated' => ($snippet['trackKind'] ?? '') === 'ASR',
            'isDraft' => ($snippet['isDraft'] ?? false),
            'trackKind' => $snippet['trackKind'] ?? 'manual'
        ];
    }
}

if (empty($availableCaptions)) {
    echo json_encode([
        'success' => false,
        'error' => 'No captions available for this video',
        'video_title' => $videoTitle,
        'video_id' => $videoId
    ]);
    exit;
}

// Try to get transcript using YouTube's timed text API
$selectedCaption = $availableCaptions[0];
$language = $selectedCaption['language'] ?? 'en';

// Use YouTube's timed text API to get actual transcript content
$transcriptUrl = "https://www.youtube.com/api/timedtext?lang=" . urlencode($language) . "&v=" . urlencode($videoId);

// Make HTTP request to get transcript
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $transcriptUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

$transcriptXml = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($httpCode === 200 && !empty($transcriptXml)) {
    // Parse XML transcript
    $xml = simplexml_load_string($transcriptXml);
    if ($xml && isset($xml->text)) {
        $transcriptLines = [];
        $totalLines = 0;
        
        foreach ($xml->text as $text) {
            $start = (float)$text['start'];
            $duration = (float)$text['dur'];
            $content = (string)$text;
            
            if (!empty(trim($content))) {
                $transcriptLines[] = [
                    'start' => $start,
                    'duration' => $duration,
                    'text' => trim($content)
                ];
                $totalLines++;
            }
        }
        
        // Format transcript for display
        $formattedTranscript = '';
        foreach ($transcriptLines as $line) {
            $minutes = floor($line['start'] / 60);
            $seconds = $line['start'] % 60;
            $timeStamp = sprintf('[%02d:%02d]', $minutes, $seconds);
            $formattedTranscript .= $timeStamp . ' ' . $line['text'] . "\n";
        }
        
        echo json_encode([
            'success' => true,
            'video_title' => $videoTitle,
            'video_id' => $videoId,
            'available_captions' => $availableCaptions,
            'transcript_preview' => $formattedTranscript,
            'total_lines' => $totalLines,
            'message' => 'Transcript retrieved successfully!',
            'note' => 'Full transcript content with timestamps is now available.'
        ]);
        exit;
    }
}

// Fallback: return captions info if transcript download fails
echo json_encode([
    'success' => true,
    'video_title' => $videoTitle,
    'video_id' => $videoId,
    'available_captions' => $availableCaptions,
    'transcript_preview' => 'Transcript download failed, but captions are available',
    'total_captions' => count($availableCaptions),
    'message' => 'Captions found successfully. Transcript download failed.',
    'note' => 'Try using a different video or check if captions are available.'
]);
?>