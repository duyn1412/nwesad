<?php
/**
 * Fetch the closedâ€‘caption transcript for a given YouTube video using OAuth2.
 *
 * This endpoint expects a JSON payload containing a single key,
 * `youtube_url`, whose value is the URL of the YouTube video.  It
 * extracts the video ID from the URL and uses OAuth2 access token
 * to fetch the actual transcript from YouTube API.
 */

header('Content-Type: application/json');

// Start session to access OAuth tokens
session_start();

// Include OAuth configuration
if (file_exists(__DIR__ . '/oauth-config.php')) {
    require_once __DIR__ . '/oauth-config.php';
} else {
    echo json_encode(['error' => 'OAuth configuration not found']);
    exit;
}

// Check if user has valid OAuth tokens
if (!hasValidYouTubeTokens()) {
    echo json_encode([
        'error' => 'OAuth2 authentication required',
        'redirect_url' => getYouTubeAuthUrl(),
        'message' => 'Please authenticate with Google to access YouTube transcripts'
    ]);
    exit;
}

// Read the raw POST body and decode JSON
$body = file_get_contents('php://input');
$payload = json_decode($body, true);

if (!is_array($payload) || empty($payload['youtube_url'])) {
    echo json_encode(['error' => 'No youtube_url provided']);
    exit;
}

/**
 * Extracts a YouTube video ID from a URL.
 * Enhanced to handle more YouTube URL formats.
 */
function getYouTubeVideoId(string $url): string
{
    // Clean the URL first
    $url = trim($url);
    
    // DON'T remove query parameters - we need them for YouTube URLs!
    // $url = preg_replace('/[?&].*$/', '', $url); // REMOVED THIS LINE
    
    $patterns = [
        // Short form: youtu.be/VIDEO_ID
        '/youtu\.be\/([a-zA-Z0-9_-]{11})/',
        
        // Standard watch form: youtube.com/watch?v=VIDEO_ID
        '/youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Alternative watch form: youtube.com/watch?feature=...&v=VIDEO_ID
        '/youtube\.com\/watch\?.*[&?]v=([a-zA-Z0-9_-]{11})/',
        
        // Embed form: youtube.com/embed/VIDEO_ID
        '/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/',
        
        // Channel video form: youtube.com/channel/.../videos/VIDEO_ID
        '/youtube\.com\/channel\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // User video form: youtube.com/user/.../videos/VIDEO_ID
        '/youtube\.com\/user\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // Direct video form: youtube.com/v/VIDEO_ID
        '/youtube\.com\/v\/([a-zA-Z0-9_-]{11})/',
        
        // Mobile form: m.youtube.com/watch?v=VIDEO_ID
        '/m\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Music form: music.youtube.com/watch?v=VIDEO_ID
        '/music\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Just the video ID itself (if user pastes only the ID)
        '/^([a-zA-Z0-9_-]{11})$/'
    ];
    
    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $url, $matches)) {
            return $matches[1];
        }
    }
    
    return '';
}

$videoUrl = trim($payload['youtube_url']);
$videoId  = getYouTubeVideoId($videoUrl);

// Debug logging
error_log("YouTube URL received: " . $videoUrl);
error_log("Extracted video ID: " . $videoId);

if ($videoId === '') {
    echo json_encode([
        'error' => 'Invalid YouTube URL',
        'debug' => [
            'received_url' => $videoUrl,
            'extracted_id' => $videoId,
            'message' => 'Could not extract video ID from the provided URL'
        ]
    ]);
    exit;
}

// Function makeYouTubeApiRequest is defined in oauth-config.php

// First, get video details and available captions
$videoInfoUrl = "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=" . urlencode($videoId);
$videoInfo = makeYouTubeApiRequest($videoInfoUrl);

if (isset($videoInfo['error'])) {
    echo json_encode(['error' => 'Failed to get video info: ' . $videoInfo['error']]);
    exit;
}

if (empty($videoInfo['items'])) {
    echo json_encode(['error' => 'Video not found or access denied']);
    exit;
}

$videoSnippet = $videoInfo['items'][0]['snippet'];
$videoTitle = $videoSnippet['title'];

// Get available captions
$captionsUrl = "https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=" . urlencode($videoId);
$captionsInfo = makeYouTubeApiRequest($captionsUrl);

if (isset($captionsInfo['error'])) {
    echo json_encode(['error' => 'Failed to get captions info: ' . $captionsInfo['error']]);
    exit;
}

$availableCaptions = [];
if (isset($captionsInfo['items'])) {
    foreach ($captionsInfo['items'] as $caption) {
        $snippet = $caption['snippet'];
        $availableCaptions[] = [
            'id' => $caption['id'],
            'language' => $snippet['language'] ?? 'unknown',
            'name' => $snippet['name'] ?? '',
            'isCC' => ($snippet['trackKind'] ?? '') === '',
            'isAutoGenerated' => ($snippet['trackKind'] ?? '') === 'ASR',
            'isDraft' => ($snippet['isDraft'] ?? false),
            'trackKind' => $snippet['trackKind'] ?? 'manual'
        ];
    }
}

if (empty($availableCaptions)) {
    echo json_encode([
        'success' => false,
        'error' => 'No captions available for this video',
        'video_title' => $videoTitle,
        'video_id' => $videoId
    ]);
    exit;
}

// Use YouTube Transcript API as primary method (more reliable)
error_log("Using YouTube Transcript API as primary method");

$youtubeTranscriptUrl = "https://youtube-transcript-api.vercel.app/api/transcript?url=" . urlencode($videoUrl);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $youtubeTranscriptUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');

$transcriptApiResponse = curl_exec($ch);
$transcriptApiHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$transcriptApiCurlError = curl_error($ch);
curl_close($ch);

// Debug logging
error_log("YouTube Transcript API Response Code: " . $transcriptApiHttpCode);
error_log("YouTube Transcript API Response: " . substr($transcriptApiResponse, 0, 500));

if ($transcriptApiHttpCode === 200 && !empty($transcriptApiResponse)) {
    $transcriptApiData = json_decode($transcriptApiResponse, true);
    
    if (json_last_error() === JSON_ERROR_NONE && isset($transcriptApiData['transcript'])) {
        // Success! Format the transcript
        $transcriptLines = $transcriptApiData['transcript'];
        $totalLines = count($transcriptLines);
        
        $formattedTranscript = '';
        foreach ($transcriptLines as $line) {
            $start = $line['start'] ?? 0;
            $text = $line['text'] ?? '';
            
            if (!empty(trim($text))) {
                $minutes = floor($start / 60);
                $seconds = $start % 60;
                $timeStamp = sprintf('[%02d:%02d]', $minutes, $seconds);
                $formattedTranscript .= $timeStamp . ' ' . trim($text) . "\n";
            }
        }
        
        echo json_encode([
            'success' => true,
            'video_title' => $videoTitle,
            'video_id' => $videoId,
            'available_captions' => $availableCaptions,
            'transcript_preview' => $formattedTranscript,
            'total_lines' => $totalLines,
            'message' => 'Transcript retrieved successfully via YouTube Transcript API!',
            'note' => 'Full transcript content with timestamps is now available.'
        ]);
        exit;
    }
}

// If YouTube Transcript API fails, try alternative endpoints
error_log("YouTube Transcript API failed, trying alternative endpoints");

$alternativeEndpoints = [
    "https://youtube-transcript-api.vercel.app/api/transcript?videoID=" . urlencode($videoId) . "&lang=en",
    "https://youtube-transcript-api.vercel.app/api/transcript?videoID=" . urlencode($videoId),
    "https://youtube-transcript-api.vercel.app/api/transcript?url=" . urlencode("https://www.youtube.com/watch?v=" . $videoId)
];

foreach ($alternativeEndpoints as $endpoint) {
    error_log("Trying alternative endpoint: " . $endpoint);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $endpoint);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
    
    $altResponse = curl_exec($ch);
    $altHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($altHttpCode === 200 && !empty($altResponse)) {
        $altData = json_decode($altResponse, true);
        
        if (json_last_error() === JSON_ERROR_NONE && isset($altData['transcript'])) {
            // Success! Format the transcript
            $transcriptLines = $altData['transcript'];
            $totalLines = count($transcriptLines);
            
            $formattedTranscript = '';
            foreach ($transcriptLines as $line) {
                $start = $line['start'] ?? 0;
                $text = $line['text'] ?? '';
                
                if (!empty(trim($text))) {
                    $minutes = floor($start / 60);
                    $seconds = $start % 60;
                    $timeStamp = sprintf('[%02d:%02d]', $minutes, $seconds);
                    $formattedTranscript .= $timeStamp . ' ' . trim($text) . "\n";
                }
            }
            
            echo json_encode([
                'success' => true,
                'video_title' => $videoTitle,
                'video_id' => $videoId,
                'available_captions' => $availableCaptions,
                'transcript_preview' => $formattedTranscript,
                'total_lines' => $totalLines,
                'message' => 'Transcript retrieved successfully via alternative endpoint!',
                'note' => 'Full transcript content with timestamps is now available.'
            ]);
            exit;
        }
    }
}

// If all methods fail, try AI transcription as final fallback
error_log("All YouTube methods failed, trying AI transcription");

// Try AI transcription using OpenAI Whisper
$aiTranscriptUrl = "https://www.nwengineeringllc.com/nwesadmin/video/fetch_transcript_ai.php";

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $aiTranscriptUrl);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['youtube_url' => $videoUrl]));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 120); // Longer timeout for AI processing
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/json'
]);

$aiResponse = curl_exec($ch);
$aiHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$aiCurlError = curl_error($ch);
curl_close($ch);

if ($aiHttpCode === 200 && !empty($aiResponse)) {
    $aiData = json_decode($aiResponse, true);
    
    if (json_last_error() === JSON_ERROR_NONE && isset($aiData['success']) && $aiData['success']) {
        // AI transcription succeeded!
        echo json_encode([
            'success' => true,
            'video_title' => $videoTitle,
            'video_id' => $videoId,
            'available_captions' => $availableCaptions,
            'transcript_preview' => $aiData['transcript_preview'],
            'total_lines' => $aiData['total_lines'],
            'message' => 'Transcript retrieved successfully via AI transcription!',
            'note' => 'Using OpenAI Whisper API for high-quality transcription.',
            'method' => 'ai_transcription',
            'language' => $aiData['language'] ?? 'unknown'
        ]);
        exit;
    }
}

// If all methods fail, return captions info
error_log("All transcript methods including AI failed");

echo json_encode([
    'success' => true,
    'video_title' => $videoTitle,
    'video_id' => $videoId,
    'available_captions' => $availableCaptions,
    'transcript_preview' => 'Transcript download failed, but captions are available',
    'total_captions' => count($availableCaptions),
    'message' => 'Captions found successfully. All transcript methods failed.',
    'note' => 'Try using a different video or consider AI transcription setup.',
    'debug_info' => [
        'youtube_transcript_api_http_code' => $transcriptApiHttpCode,
        'youtube_transcript_api_response' => substr($transcriptApiResponse, 0, 200),
        'ai_transcription_http_code' => $aiHttpCode,
        'ai_transcription_response' => substr($aiResponse, 0, 200),
        'note' => 'All transcript methods including AI failed'
    ]
]);
?>