<?php
/**
 * Fetch the closedâ€‘caption transcript for a given YouTube video using OAuth2.
 *
 * This endpoint expects a JSON payload containing a single key,
 * `youtube_url`, whose value is the URL of the YouTube video.  It
 * extracts the video ID from the URL and uses OAuth2 access token
 * to fetch the actual transcript from YouTube API.
 */

header('Content-Type: application/json');

// Start session to access OAuth tokens
session_start();

// Include OAuth configuration
if (file_exists(__DIR__ . '/oauth-config.php')) {
    require_once __DIR__ . '/oauth-config.php';
} else {
    echo json_encode(['error' => 'OAuth configuration not found']);
    exit;
}

// Check if user has valid OAuth tokens
if (!hasValidYouTubeTokens()) {
    echo json_encode([
        'error' => 'OAuth2 authentication required',
        'redirect_url' => getYouTubeAuthUrl(),
        'message' => 'Please authenticate with Google to access YouTube transcripts'
    ]);
    exit;
}

// Read the raw POST body and decode JSON
$body = file_get_contents('php://input');
$payload = json_decode($body, true);

if (!is_array($payload) || empty($payload['youtube_url'])) {
    echo json_encode(['error' => 'No youtube_url provided']);
    exit;
}

/**
 * Extracts a YouTube video ID from a URL.
 * Enhanced to handle more YouTube URL formats.
 */
function getYouTubeVideoId(string $url): string
{
    // Clean the URL first
    $url = trim($url);
    
    // DON'T remove query parameters - we need them for YouTube URLs!
    // $url = preg_replace('/[?&].*$/', '', $url); // REMOVED THIS LINE
    
    $patterns = [
        // Short form: youtu.be/VIDEO_ID
        '/youtu\.be\/([a-zA-Z0-9_-]{11})/',
        
        // Standard watch form: youtube.com/watch?v=VIDEO_ID
        '/youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Alternative watch form: youtube.com/watch?feature=...&v=VIDEO_ID
        '/youtube\.com\/watch\?.*[&?]v=([a-zA-Z0-9_-]{11})/',
        
        // Embed form: youtube.com/embed/VIDEO_ID
        '/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/',
        
        // Channel video form: youtube.com/channel/.../videos/VIDEO_ID
        '/youtube\.com\/channel\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // User video form: youtube.com/user/.../videos/VIDEO_ID
        '/youtube\.com\/user\/[^\/]+\/videos\/([a-zA-Z0-9_-]{11})/',
        
        // Direct video form: youtube.com/v/VIDEO_ID
        '/youtube\.com\/v\/([a-zA-Z0-9_-]{11})/',
        
        // Mobile form: m.youtube.com/watch?v=VIDEO_ID
        '/m\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Music form: music.youtube.com/watch?v=VIDEO_ID
        '/music\.youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/',
        
        // Just the video ID itself (if user pastes only the ID)
        '/^([a-zA-Z0-9_-]{11})$/'
    ];
    
    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $url, $matches)) {
            return $matches[1];
        }
    }
    
    return '';
}

$videoUrl = trim($payload['youtube_url']);
$videoId  = getYouTubeVideoId($videoUrl);

// Debug logging
error_log("YouTube URL received: " . $videoUrl);
error_log("Extracted video ID: " . $videoId);

if ($videoId === '') {
    echo json_encode([
        'error' => 'Invalid YouTube URL',
        'debug' => [
            'received_url' => $videoUrl,
            'extracted_id' => $videoId,
            'message' => 'Could not extract video ID from the provided URL'
        ]
    ]);
    exit;
}

// Function makeYouTubeApiRequest is defined in oauth-config.php

// First, get video details and available captions
$videoInfoUrl = "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=" . urlencode($videoId);
$videoInfo = makeYouTubeApiRequest($videoInfoUrl);

if (isset($videoInfo['error'])) {
    echo json_encode(['error' => 'Failed to get video info: ' . $videoInfo['error']]);
    exit;
}

if (empty($videoInfo['items'])) {
    echo json_encode(['error' => 'Video not found or access denied']);
    exit;
}

$videoSnippet = $videoInfo['items'][0]['snippet'];
$videoTitle = $videoSnippet['title'];

// Get available captions
$captionsUrl = "https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=" . urlencode($videoId);
$captionsInfo = makeYouTubeApiRequest($captionsUrl);

if (isset($captionsInfo['error'])) {
    echo json_encode(['error' => 'Failed to get captions info: ' . $captionsInfo['error']]);
    exit;
}

$availableCaptions = [];
if (isset($captionsInfo['items'])) {
    foreach ($captionsInfo['items'] as $caption) {
        $snippet = $caption['snippet'];
        $availableCaptions[] = [
            'id' => $caption['id'],
            'language' => $snippet['language'] ?? 'unknown',
            'name' => $snippet['name'] ?? '',
            'isCC' => ($snippet['trackKind'] ?? '') === '',
            'isAutoGenerated' => ($snippet['trackKind'] ?? '') === 'ASR',
            'isDraft' => ($snippet['isDraft'] ?? false),
            'trackKind' => $snippet['trackKind'] ?? 'manual'
        ];
    }
}

if (empty($availableCaptions)) {
    echo json_encode([
        'success' => false,
        'error' => 'No captions available for this video',
        'video_title' => $videoTitle,
        'video_id' => $videoId
    ]);
    exit;
}

// Try to get transcript using YouTube Data API v3 captions.download with proper OAuth2
$selectedCaption = $availableCaptions[0];
$captionId = $selectedCaption['id'];
$language = $selectedCaption['language'] ?? 'en';

// Get OAuth access token
$accessToken = getYouTubeAccessToken();
if (!$accessToken) {
    echo json_encode(['error' => 'Failed to get OAuth access token']);
    exit;
}

// Method 1: Try to get transcript using YouTube Data API v3 captions.download
$transcriptUrl = "https://www.googleapis.com/youtube/v3/captions/" . urlencode($captionId);

// Debug logging
error_log("Attempting to fetch transcript from YouTube Data API v3: " . $transcriptUrl);
error_log("Caption ID: " . $captionId . ", Language: " . $language . ", Video ID: " . $videoId);

// Make direct HTTP request with OAuth2 token
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $transcriptUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Authorization: Bearer ' . $accessToken,
    'Accept: application/json'
]);

$transcriptResponse = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$curlError = curl_error($ch);
curl_close($ch);

// Debug logging
error_log("YouTube Data API v3 Response Code: " . $httpCode);
error_log("YouTube Data API v3 Response: " . substr($transcriptResponse, 0, 500));

if ($httpCode === 200 && !empty($transcriptResponse)) {
    // Success! Parse the transcript content
    error_log("YouTube Data API v3 captions.download successful");
    
    // Try to parse as JSON first (error response)
    $jsonResponse = json_decode($transcriptResponse, true);
    if (json_last_error() === JSON_ERROR_NONE && isset($jsonResponse['error'])) {
        // It's an error response
        error_log("YouTube API returned error: " . json_encode($jsonResponse['error']));
    } else {
        // It's the actual transcript content
        $transcriptContent = $transcriptResponse;
        
        // Try to parse as XML first (YouTube captions format)
        if (strpos($transcriptContent, '<?xml') !== false || strpos($transcriptContent, '<transcript>') !== false) {
            $xml = simplexml_load_string($transcriptContent);
            if ($xml && isset($xml->text)) {
                $transcriptLines = [];
                $totalLines = 0;
                
                foreach ($xml->text as $text) {
                    $start = (float)$text['start'];
                    $duration = (float)$text['dur'];
                    $content = (string)$text;
                    
                    if (!empty(trim($content))) {
                        $transcriptLines[] = [
                            'start' => $start,
                            'duration' => $duration,
                            'text' => trim($content)
                        ];
                        $totalLines++;
                    }
                }
                
                // Format transcript for display
                $formattedTranscript = '';
                foreach ($transcriptLines as $line) {
                    $minutes = floor($line['start'] / 60);
                    $seconds = $line['start'] % 60;
                    $timeStamp = sprintf('[%02d:%02d]', $minutes, $seconds);
                    $formattedTranscript .= $timeStamp . ' ' . $line['text'] . "\n";
                }
                
                echo json_encode([
                    'success' => true,
                    'video_title' => $videoTitle,
                    'video_id' => $videoId,
                    'available_captions' => $availableCaptions,
                    'transcript_preview' => $formattedTranscript,
                    'total_lines' => $totalLines,
                    'message' => 'Transcript retrieved successfully via YouTube Data API v3!',
                    'note' => 'Full transcript content with timestamps is now available.'
                ]);
                exit;
            }
        }
        
        // If not XML, try to parse as plain text
        $lines = explode("\n", $transcriptContent);
        $totalLines = count(array_filter($lines, 'trim'));
        
        echo json_encode([
            'success' => true,
            'video_title' => $videoTitle,
            'video_id' => $videoId,
            'available_captions' => $availableCaptions,
            'transcript_preview' => $transcriptContent,
            'total_lines' => $totalLines,
            'message' => 'Transcript retrieved successfully via YouTube Data API v3!',
            'note' => 'Transcript content available (format may vary).'
        ]);
        exit;
    }
}

// If YouTube Data API v3 fails, try YouTube Transcript API as fallback
error_log("YouTube Data API v3 captions.download failed, trying YouTube Transcript API");

$youtubeTranscriptUrl = "https://youtube-transcript-api.vercel.app/api/transcript?url=" . urlencode($videoUrl);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $youtubeTranscriptUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

$transcriptApiResponse = curl_exec($ch);
$transcriptApiHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$transcriptApiCurlError = curl_error($ch);
curl_close($ch);

// Debug logging
error_log("YouTube Transcript API Response Code: " . $transcriptApiHttpCode);
error_log("YouTube Transcript API Response: " . substr($transcriptApiResponse, 0, 500));

if ($transcriptApiHttpCode === 200 && !empty($transcriptApiResponse)) {
    $transcriptApiData = json_decode($transcriptApiResponse, true);
    
    if (json_last_error() === JSON_ERROR_NONE && isset($transcriptApiData['transcript'])) {
        // Success! Format the transcript
        $transcriptLines = $transcriptApiData['transcript'];
        $totalLines = count($transcriptLines);
        
        $formattedTranscript = '';
        foreach ($transcriptLines as $line) {
            $start = $line['start'] ?? 0;
            $text = $line['text'] ?? '';
            
            if (!empty(trim($text))) {
                $minutes = floor($start / 60);
                $seconds = $start % 60;
                $timeStamp = sprintf('[%02d:%02d]', $minutes, $seconds);
                $formattedTranscript .= $timeStamp . ' ' . trim($text) . "\n";
            }
        }
        
        echo json_encode([
            'success' => true,
            'video_title' => $videoTitle,
            'video_id' => $videoId,
            'available_captions' => $availableCaptions,
            'transcript_preview' => $formattedTranscript,
            'total_lines' => $totalLines,
            'message' => 'Transcript retrieved successfully via YouTube Transcript API!',
            'note' => 'Full transcript content with timestamps is now available.'
        ]);
        exit;
    }
}

// If both methods fail, return captions info
error_log("Both YouTube Data API v3 and YouTube Transcript API failed");

echo json_encode([
    'success' => true,
    'video_title' => $videoTitle,
    'video_id' => $videoId,
    'available_captions' => $availableCaptions,
    'transcript_preview' => 'Transcript download failed, but captions are available',
    'total_captions' => count($availableCaptions),
    'message' => 'Captions found successfully. Transcript download failed.',
    'note' => 'Try using a different video or check if captions are available.',
    'debug_info' => [
        'youtube_api_v3_http_code' => $httpCode,
        'youtube_api_v3_response' => substr($transcriptResponse, 0, 200),
        'youtube_transcript_api_http_code' => $transcriptApiHttpCode,
        'youtube_transcript_api_response' => substr($transcriptApiResponse, 0, 200),
        'note' => 'Both YouTube Data API v3 and YouTube Transcript API failed'
    ]
]);
?>